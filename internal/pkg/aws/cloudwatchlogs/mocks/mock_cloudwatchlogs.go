// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/aws/cloudwatchlogs/cloudwatchlogs.go

// Package mocks is a generated GoMock package.
package mocks

import (
	cloudwatchlogs "github.com/aws/aws-sdk-go/service/cloudwatchlogs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockcloudwatchlogsClient is a mock of cloudwatchlogsClient interface
type MockcloudwatchlogsClient struct {
	ctrl     *gomock.Controller
	recorder *MockcloudwatchlogsClientMockRecorder
}

// MockcloudwatchlogsClientMockRecorder is the mock recorder for MockcloudwatchlogsClient
type MockcloudwatchlogsClientMockRecorder struct {
	mock *MockcloudwatchlogsClient
}

// NewMockcloudwatchlogsClient creates a new mock instance
func NewMockcloudwatchlogsClient(ctrl *gomock.Controller) *MockcloudwatchlogsClient {
	mock := &MockcloudwatchlogsClient{ctrl: ctrl}
	mock.recorder = &MockcloudwatchlogsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcloudwatchlogsClient) EXPECT() *MockcloudwatchlogsClientMockRecorder {
	return m.recorder
}

// DescribeLogStreams mocks base method
func (m *MockcloudwatchlogsClient) DescribeLogStreams(input *cloudwatchlogs.DescribeLogStreamsInput) (*cloudwatchlogs.DescribeLogStreamsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DescribeLogStreams", input)
	ret0, _ := ret[0].(*cloudwatchlogs.DescribeLogStreamsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeLogStreams indicates an expected call of DescribeLogStreams
func (mr *MockcloudwatchlogsClientMockRecorder) DescribeLogStreams(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeLogStreams", reflect.TypeOf((*MockcloudwatchlogsClient)(nil).DescribeLogStreams), input)
}

// GetLogEvents mocks base method
func (m *MockcloudwatchlogsClient) GetLogEvents(input *cloudwatchlogs.GetLogEventsInput) (*cloudwatchlogs.GetLogEventsOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogEvents", input)
	ret0, _ := ret[0].(*cloudwatchlogs.GetLogEventsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogEvents indicates an expected call of GetLogEvents
func (mr *MockcloudwatchlogsClientMockRecorder) GetLogEvents(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogEvents", reflect.TypeOf((*MockcloudwatchlogsClient)(nil).GetLogEvents), input)
}
