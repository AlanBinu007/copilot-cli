// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/term/term.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProgress is a mock of Progress interface
type MockProgress struct {
	ctrl     *gomock.Controller
	recorder *MockProgressMockRecorder
}

// MockProgressMockRecorder is the mock recorder for MockProgress
type MockProgressMockRecorder struct {
	mock *MockProgress
}

// NewMockProgress creates a new mock instance
func NewMockProgress(ctrl *gomock.Controller) *MockProgress {
	mock := &MockProgress{ctrl: ctrl}
	mock.recorder = &MockProgressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProgress) EXPECT() *MockProgressMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockProgress) Start(label string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", label)
}

// Start indicates an expected call of Start
func (mr *MockProgressMockRecorder) Start(label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockProgress)(nil).Start), label)
}

// Stop mocks base method
func (m *MockProgress) Stop(label string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", label)
}

// Stop indicates an expected call of Stop
func (mr *MockProgressMockRecorder) Stop(label interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockProgress)(nil).Stop), label)
}

// Tips mocks base method
func (m *MockProgress) Tips(arg0 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Tips", arg0)
}

// Tips indicates an expected call of Tips
func (mr *MockProgressMockRecorder) Tips(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tips", reflect.TypeOf((*MockProgress)(nil).Tips), arg0)
}
