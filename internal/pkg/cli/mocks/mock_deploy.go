// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/cli/deploy.go

// Package mocks is a generated GoMock package.
package mocks

import (
	deploy "github.com/aws/amazon-ecs-cli-v2/internal/pkg/deploy"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockenvironmentDeployer is a mock of environmentDeployer interface
type MockenvironmentDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockenvironmentDeployerMockRecorder
}

// MockenvironmentDeployerMockRecorder is the mock recorder for MockenvironmentDeployer
type MockenvironmentDeployerMockRecorder struct {
	mock *MockenvironmentDeployer
}

// NewMockenvironmentDeployer creates a new mock instance
func NewMockenvironmentDeployer(ctrl *gomock.Controller) *MockenvironmentDeployer {
	mock := &MockenvironmentDeployer{ctrl: ctrl}
	mock.recorder = &MockenvironmentDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockenvironmentDeployer) EXPECT() *MockenvironmentDeployerMockRecorder {
	return m.recorder
}

// DeployEnvironment mocks base method
func (m *MockenvironmentDeployer) DeployEnvironment(env *deploy.CreateEnvironmentInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployEnvironment", env)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployEnvironment indicates an expected call of DeployEnvironment
func (mr *MockenvironmentDeployerMockRecorder) DeployEnvironment(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployEnvironment", reflect.TypeOf((*MockenvironmentDeployer)(nil).DeployEnvironment), env)
}

// StreamEnvironmentCreation mocks base method
func (m *MockenvironmentDeployer) StreamEnvironmentCreation(env *deploy.CreateEnvironmentInput) (<-chan []deploy.ResourceEvent, <-chan deploy.CreateEnvironmentResponse) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamEnvironmentCreation", env)
	ret0, _ := ret[0].(<-chan []deploy.ResourceEvent)
	ret1, _ := ret[1].(<-chan deploy.CreateEnvironmentResponse)
	return ret0, ret1
}

// StreamEnvironmentCreation indicates an expected call of StreamEnvironmentCreation
func (mr *MockenvironmentDeployerMockRecorder) StreamEnvironmentCreation(env interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamEnvironmentCreation", reflect.TypeOf((*MockenvironmentDeployer)(nil).StreamEnvironmentCreation), env)
}

// MockprojectDeployer is a mock of projectDeployer interface
type MockprojectDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockprojectDeployerMockRecorder
}

// MockprojectDeployerMockRecorder is the mock recorder for MockprojectDeployer
type MockprojectDeployerMockRecorder struct {
	mock *MockprojectDeployer
}

// NewMockprojectDeployer creates a new mock instance
func NewMockprojectDeployer(ctrl *gomock.Controller) *MockprojectDeployer {
	mock := &MockprojectDeployer{ctrl: ctrl}
	mock.recorder = &MockprojectDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockprojectDeployer) EXPECT() *MockprojectDeployerMockRecorder {
	return m.recorder
}

// DeployProject mocks base method
func (m *MockprojectDeployer) DeployProject(in *deploy.CreateProjectInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeployProject", in)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeployProject indicates an expected call of DeployProject
func (mr *MockprojectDeployerMockRecorder) DeployProject(in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeployProject", reflect.TypeOf((*MockprojectDeployer)(nil).DeployProject), in)
}
