// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/pkg/cli/prompter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	prompt "github.com/aws/amazon-ecs-cli-v2/internal/pkg/term/prompt"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockprompter is a mock of prompter interface
type Mockprompter struct {
	ctrl     *gomock.Controller
	recorder *MockprompterMockRecorder
}

// MockprompterMockRecorder is the mock recorder for Mockprompter
type MockprompterMockRecorder struct {
	mock *Mockprompter
}

// NewMockprompter creates a new mock instance
func NewMockprompter(ctrl *gomock.Controller) *Mockprompter {
	mock := &Mockprompter{ctrl: ctrl}
	mock.recorder = &MockprompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockprompter) EXPECT() *MockprompterMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *Mockprompter) Get(message, help string, validator prompt.ValidatorFunc) (string, error) {
	ret := m.ctrl.Call(m, "Get", message, help, validator)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockprompterMockRecorder) Get(message, help, validator interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Mockprompter)(nil).Get), message, help, validator)
}

// GetSecret mocks base method
func (m *Mockprompter) GetSecret(message, help string) (string, error) {
	ret := m.ctrl.Call(m, "GetSecret", message, help)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret
func (mr *MockprompterMockRecorder) GetSecret(message, help interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*Mockprompter)(nil).GetSecret), message, help)
}

// SelectOne mocks base method
func (m *Mockprompter) SelectOne(message, help string, options []string) (string, error) {
	ret := m.ctrl.Call(m, "SelectOne", message, help, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOne indicates an expected call of SelectOne
func (mr *MockprompterMockRecorder) SelectOne(message, help, options interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOne", reflect.TypeOf((*Mockprompter)(nil).SelectOne), message, help, options)
}

// Confirm mocks base method
func (m *Mockprompter) Confirm(message, help string, options ...prompt.ConfirmOption) (bool, error) {
	varargs := []interface{}{message, help}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Confirm", varargs...)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Confirm indicates an expected call of Confirm
func (mr *MockprompterMockRecorder) Confirm(message, help interface{}, options ...interface{}) *gomock.Call {
	varargs := append([]interface{}{message, help}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Confirm", reflect.TypeOf((*Mockprompter)(nil).Confirm), varargs...)
}
